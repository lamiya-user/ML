# -*- coding: utf-8 -*-
"""Lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aaYPcJpQBrytgAoD5w_ZDJEVCHU0YeM3
"""

!pip install numpy==2.2.0
!pip install pandas==2.2.3
!pip install scikit-learn==1.6.0
!pip install matplotlib==3.9.3

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline

url= "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/Module%202/data/FuelConsumptionCo2.csv"

df =pd.read_csv(url)
df.sample(4)

df.describe()

df=df.drop(['MODELYEAR', 'MAKE', 'MODEL', 'VEHICLECLASS', 'TRANSMISSION', 'FUELTYPE',],axis=1)

df.corr()

df = df.drop(['CYLINDERS', 'FUELCONSUMPTION_CITY', 'FUELCONSUMPTION_HWY','FUELCONSUMPTION_COMB',],axis=1)

df.head(9)

axes = pd.plotting.scatter_matrix(df,alpha=0.2)
for ax in axes.flatten():
  ax.xaxis.label.set_rotation(90)
  ax.yaxis.label.set_rotation(0)
  ax.yaxis.label.set_ha('right')
plt.tight_layout()
plt.gcf().subplots_adjust(wspace=0, hspace=0)
plt.show()

x = df.iloc[:,[0,1]].to_numpy()
y = df.iloc[:,[2]].to_numpy()

from sklearn import preprocessing
std_scaler=preprocessing.Standardscaler()
X_std =std_scaler.fit_transform(X)

from sklearn import preprocessing
std_scaler=preprocessing.Standardscaler()
X_std =std_scaler.fit_transform(X)

!pip install --upgrade numpy scikit-learn

from sklearn import preprocessing
std_scaler=preprocessing.Standardscaler()
X_std =std_scaler.fit_transform(X)

!pip install --force-reinstall numpy==1.24.4 scikit-learn==1.3.2

"""preprocessing the data

"""

from sklearn import preprocessing
std_scaler = preprocessing.StandardScaler()
x_std =std_scaler.fit_transform(x)

from sklearn import preprocessing

# Create a StandardScaler object
std_scaler = preprocessing.StandardScaler()

# Assuming X is your input feature matrix
x_std = std_scaler.fit_transform(x)

pd.DataFrame(x_std).describe().round(2)

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x_std,y,test_size=0.2,random_state=42)

from sklearn import linear_model
regr = linear_model.LinearRegression()
regr.fit(x_train,y_train)
coef_ =regr.coef_
intercept_ =regr.intercept_
print("coeffecient",coef_)
print("intercept",intercept_)



means_ =std_scaler.mean_
std_devs_ =np.sqrt(std_scaler.var_)
coef_original =coef_/std_devs_
intercept_original =intercept_- np.sum((means_*coef_)/std_devs_)

print ('Coefficients: ', coef_original)
print ('Intercept: ', intercept_original)

#from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import matplotlib.pyplot as plt

# Ensure X1, X2, and y_test have compatible shapes for 3D plotting
X1 = x_test[:, 0] if x_test.ndim > 1 else x_test
X2 = x_test[:, 1] if x_test.ndim > 1 else np.zeros_like(X1)

# Create a mesh grid for plotting the regression plane
x1_surf, x2_surf = np.meshgrid(np.linspace(X1.min(), X1.max(), 100),
                               np.linspace(X2.min(), X2.max(), 100))

y_surf = intercept_ +  coef_[0,0] * x1_surf  +  coef_[0,1] * x2_surf

# Predict y values using trained regression model to compare with actual y_test for above/below plane colors
y_pred = regr.predict(x_test.reshape(-1, 1)) if x_test.ndim == 1 else regr.predict(x_test)
above_plane = y_test >= y_pred
below_plane = y_test < y_pred
above_plane = above_plane[:,0]
below_plane = below_plane[:,0]

# Plotting
fig = plt.figure(figsize=(20, 8))
ax = fig.add_subplot(111, projection='3d')

# Plot the data points above and below the plane in different colors
ax.scatter(X1[above_plane], X2[above_plane], y_test[above_plane],  label="Above Plane",s=70,alpha=.7,ec='k')
ax.scatter(X1[below_plane], X2[below_plane], y_test[below_plane],  label="Below Plane",s=50,alpha=.3,ec='k')

# Plot the regression plane
ax.plot_surface(x1_surf, x2_surf, y_surf, color='k', alpha=0.21,label='plane')

# Set view and labels
ax.view_init(elev=10)

ax.legend(fontsize='x-large',loc='upper center')
ax.set_xticks([])
ax.set_yticks([])
ax.set_zticks([])
ax.set_box_aspect(None, zoom=0.75)
ax.set_xlabel('ENGINESIZE', fontsize='xx-large')
ax.set_ylabel('FUELCONSUMPTION', fontsize='xx-large')
ax.set_zlabel('CO2 Emissions', fontsize='xx-large')
ax.set_title('Multiple Linear Regression of CO2 Emissions', fontsize='xx-large')
plt.tight_layout()
plt.show()

x_train_1 = x_train[:,0]
regressor_1 = linear_model.LinearRegression()
regressor_1.fit(x_train_1.reshape(-1,1),y_train)
coef_1 =  regressor_1.coef_1
intercept_1 = regressor_1.intercept_1

print ('Coefficients: ',coef_1)
print ('Intercept: ',intercept_1)