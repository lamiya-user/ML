# -*- coding: utf-8 -*-
"""Lab 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kD-7rqL9FQjKaaTDgTZzzOZZePApaVGR
"""

!pip install numpy==2.2.0
!pip install pandas==2.2.3
!pip install scikit-learn==1.6.0
!pip install matplotlib==3.9.3

!pip install --upgrade --force-reinstall numpy

!pip install --upgrade --force-reinstall scikit-learn

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler

from sklearn.metrics import log_loss
import matplotlib.pyplot as plt

# %matplotlib inline

import warnings
warnings.filterwarnings('ignore')

url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/Module%203/data/ChurnData.csv"
churn_df = pd.read_csv(url)

churn_df

"""Data processing

"""

churn_df = churn_df[['tenure','age','address','income','ed','employ','equip','churn']]
churn_df['churn'] = churn_df['churn'].astype('int')
churn_df.head()

x = np.array(churn_df[['tenure','age','address','income','ed','employ','equip']])
 x[0:5]

y =np.array(churn_df['churn'])
y[0:5]

"""this is to initialise it to x and y

"""

x_norm =StandardScaler().fit(x).transform(x)
x_norm[0:5]

"""Standardise or normalise

Splitting the data sets
"""

x_train,x_test,y_train,y_test = train_test_split(x_norm,y,test_size =0.2, random_state =4)

"""building the logistic regression model

"""

LR =LogisticRegression().fit(x_train,y_train)

"""prediction for the test data

"""

yhat =LR.predict(x_test)
yhat[:10]

"""Prediction probability"""

yhat_proba =LR.predict_proba(x_test)
yhat_proba[:10]

"""predict the 1 class more accurately"""

coeffecients = pd.Series(LR.coef_[0],index=churn_df.columns[:-1])
coeffecients.sort_values().plot(kind='barh')
plt.title("Feature Coeffecients in Logistic Regression Churn Model")
plt.xlabel("Coeffecient Value")
plt.show()

"""Log Loss"""

log_loss(y_test,yhat_proba)