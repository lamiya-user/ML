# -*- coding: utf-8 -*-
"""Fraud Credit Card detection using SVM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YaIWNQ_RZArpNxDdfi6Uf6YBRKlnLIpI
"""

!pip install pandas
!pip install scikit-learn
!pip install matplotlib

# Commented out IPython magic to ensure Python compatibility.
# Import the libraries we need to use in this lab
from __future__ import print_function
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import normalize, StandardScaler
from sklearn.utils.class_weight import compute_sample_weight
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import roc_auc_score
from sklearn.svm import LinearSVC

import warnings
warnings.filterwarnings('ignore')

url ="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/Module%203/data/creditcard.csv"
raw_data =pd.read_csv(url)
raw_data

"""Dataset analysis:
1. each row has 31 variables
2. the last variable is called class and represents Target variable

"""

labels = raw_data.Class.unique()
sizes =raw_data.Class.value_counts().values
fig,ax =plt.subplots()
ax.pie(sizes,labels=labels, autopct ='%1.3f%%')
ax.set_title('Target Variable Value Counts')
plt.show()

"""Now since this data is highly unbalanced, to understand which feature affects the model in which way, we need to correlate"""

correlation_values = raw_data.corr()['Class'].drop(['Class'])
correlation_values.plot(kind='barh', figsize=(10,6))

"""Data Preprocessing"""

raw_data.iloc[:,1:30]= StandardScaler().fit_transform(raw_data.iloc[:,1:30])
data_matrix =raw_data.values
x = data_matrix[:,1:30]
y = data_matrix[:, 30]
x = normalize(x, norm="l1")

"""Train the data

train/test split
"""

x_train,x_test,y_train,y_test = train_test_split(x,y, test_size =0.3, random_state=42)

"""building a decision tree"""

w_train =compute_sample_weight('balanced',y_train)

"""decision tree"""

dt = DecisionTreeClassifier(max_depth =4,random_state=35)
dt.fit(x_train,y_train, sample_weight=w_train)

"""SVM model"""

svm =LinearSVC(class_weight='balanced',random_state=31, loss='hinge',fit_intercept=False)
svm.fit(x_train,y_train)

"""evaluating the decision tree"""

y_pred_dt =dt.predict_proba(x_test)[:,1]

roc_auc_dt = roc_auc_score(y_test, y_pred_dt)
print('Decision Tree ROC-AUC score : {0:.3f}'.format(roc_auc_dt))

"""evaluate the svm"""

y_pred_svm = svm.decision_function(x_test)

"""accuracy"""

roc_auc_svm = roc_auc_score(y_test, y_pred_svm)
print("svm roc auc score:{0:.3f}".format(roc_auc_svm))

